import requests
from bs4 import BeautifulSoup
import firebase_admin
from firebase_admin import credentials
from firebase_admin import firestore

# Send a request to the USDA Food Composition Databases website
url = "https://api.nal.usda.gov/fdc/v1/foods/search?query=apple&pageSize=2&api_key=uInUt3O980gGxC2jAEA20komAXPYeeUTgtUfUYfr"
res = requests.get(url)

# Parse the HTML content using Beautiful Soup
soup = BeautifulSoup(res.text, 'html.parser')

# Extract the desired data
ingredients = []
for ingredient in soup.find_all('li'):
    ingredients.append(ingredient.text)

# Connect to your Firebase database
cred = credentials.Certificate('/Users/richanayak/Desktop/python/vira-e7124-firebase-adminsdk-s1wi7-45dad82af3-2.json')
firebase_admin.initialize_app(cred)

db = firestore.client()

# Store the data obtained from web scraping into your Firebase database
for ingredient in ingredients:
    doc_ref = db.collection(u'ingredients').document(ingredient)
    doc_ref.set({
        u'name': ingredient
    })

bad_ingredients = ['Acetaldehyde', '2-Acetylaminofluorene', 'Acrylamide', 'Acrylonitrile', 'Aldrin', '4-Aminodiphenyl', 'Amitrole', 'Aniline', 'homologs', 'o-Anisidine','Arsenic', 'inorganic arsenic compounds','Arsine','Asbestos','Asphalt fumes', 'Benzene', 'Benzidine', 'Benzidine-based dyes', 'Beryllium', 'Butadiene', 'tert-Butyl chromate'
'Cadmium dust', 'Captafol', 'Captan', 'Carbon black', 'Carbon tetrachloride', 'Chlordane', 'Chlorinated camphene',
'Chlorodiphenyl', 'polychlorinated biphenyls',
'phthlate',
'sulfate',
'dimethicone',
'talc',
'Chloroform',
'Chloromethyl methyl ether',
'bis','Chloromethyl ether',
'B-Chloroprene','Chromium, hexavalent','Chromyl chloride', 'chromium hexavalent','Chrysene','Coal', 'coal tar',
'Coke oven emissions',
'DDT',
'dichlorodiphenyltrichloroethane',
'Di-2-ethylhexyl phthalate',
'DEHP',
'2,4-Diaminoanisoleo',
'o-Dianisidine-based dyes',
'1,2-Dibromo-3-chloropropane',
'DBCP',
'Dichloroacetylene',
'p-Dichlorobenzene',
'3,3′-Dichlorobenzidine',
'Dichloroethyl ether',
'1,3-Dichloropropene',
'Dieldrin',
'Diesel exhaust',
'Diglycidyl ether'
'DGE',
'glycidyl ethers',
'4-Dimethylaminoazobenzene',
'Dimethyl carbomoyl chloride',
'1,1-Dimethylhydrazine',
'hydrazines',
'Dimethyl sulfate',
'Dinitrotoluene',
'Dioxane',
'tobacco',
'Epichlorohydrin',
'Ethyl acrylate',
'Ethylene dibromide',
'Ehtylene dichloride',
'Ethylene oxide',
'Ethyleneimine',
'Ethylene thiourea',
'Formaldehyde',
'Gallium arsenide',
'Gasoline',
'Heptachlor',
'Hexachlorobutadiene',
'Hexachloroethane',
'Hexamethyl phosphoric triamide',
'HMPA',
'Hydrazine',
'Kepone',
'Malonaldehyde',
'Methoxychlor',
'Methyl bromide',
'monohalomethanes',
'Methyl chloride',
'Methyl iodide',
'monohalomethanes',
'Methyl hydrazine',
'hydrazines',
'4,4′-Methylenebis',
'2-chloroaniline',
'MBOCA',
'Methylene chloride',
'4,4-Methylenedianiline',
'MDA',
'α-Naphthylamine',
'alpha-naphthylamine',
'β-Naphthylamine',
'(beta-naphthylamine)',
'Nickel',
'Nickel carbonyl',
'Nickel sulfide',
'4-Nitrobiphenyl',
'p-Nitrochlorobenzene',
'2-Nitronaphthalene',
'2-Nitropropane',
'N-Nitrosodimethylamine',
'Pentachloroethane',
'chloroethanes',
'N-Phenyl-b-naphthylamine',
'b-naphthalene',
'Phenyl glycidyl ether',
'glycidyl ethers',
'Phenylhydrazine',
'hydrazines',
'Propane Sultone',
'B-Propiolactone',
'Propylene dichloride',
'Proplyene imine',
'Propylene oxide',
'Radon',
'Rosin core solder',
'formaldehyde',
'Silica',
'Soapstone',
'Tremolite silicates',
'2,3,7,8-Tetrachlorodibenzo-p-dioxin',
'TCDD',
'dioxin',
'1,1,2,2-Tetrachloroethane',
'Tetrachloroethylene',
'Titanium dioxide',
'o-Tolidine-based dyes',
'o-Tolidine',
'Toluene diisocyanate',
'TDI',
'Toluene diamine ',
'TDA',
'o-Toluidine',
'p-Toluidine',
'1,1,2-Trichloroethane',
'chloroethanes',
'Trichloroethylene',
'1,2,3-Trichloropropane',
'Uranium, insoluble compounds Uranium, soluble compounds',
'Vinyl bromide; class, vinyl halides',
'Vinyl chloride',
'Vinyl cyclohexene dioxide',
'Vinylidene chloride (1,1-dichloroethylene); class, vinyl halides)',
'Welding fumes, total particulates',
'Wood dust',
'Zinc chromate',
'chromium hexavalent',
'1,2-Epoxypropane',
'1,3-Butadiene',
'1-Methyl-2-pyrrolidone',
'2-Ethoxy ethanol',
'2-Ethoxyethyl acetate',
'2-Methoxyethanol',
'2-Methoxyethyl acetate',
'2-Nitropropane',
'4,4-Methylene-bis(2-chloroaniline)',
'4,4-Methylenedianiline',
'4.4-Isopropylidenediphenol',
'Bisphenol A',
'Acrylamide',
'Acrylonitrile',
'Arsenic acid',
'Benzene',
'Beryllium inorganic compounds',
'Bromoethylene',
'Cadmium',
'Carbon monoxide',
'Chromium (VI) compounds',
'Diesel',
'Epichlorohydrin',
'Ethylene dibromide',
'Ethylene dichloride',
'Ethylene oxide',
'Formaldehyde',
'Hardwood dusts',
'Hydrazine',
'Arsenic',
'Lead',
'Mercury',
'N,N-Dimethylacetamide',
'N,N-Dimethylformamide',
'Nickel',
'Nitrobenzene',
'o-Toluidine',
'Polycyclic aromatic hydrocarbons',
'Refractory ceramic fibres',
'Refractory ceramic fibres',
'Zirconia Aluminosilicate Refractory Ceramic Fibres',
'Aluminosilicate Refractory Ceramic Fibres',
'Petroleum',
'Aluminium',
'Lead',
'Boron',
'Lithium',
'Calcium',
'Manganese',
'Magnesium',
'Molybdenum',
'Potassium',
'Neodymium',
'Silicon',
'Nickel',
'Sodium',
'Niobium',
'Antimony',
'Nitrogen',
'Arsenic',
'Phosphorus',
'Barium',
'Praseodymium',
'Bismuth',
'Rubidium',
'Cadmium',
'Selenium',
'Carbon',
'Silver',
'Cerium',
'Strontium',
'Cesium',
'Sulfur',
'Chromium',
'Tellurium',
'Cobalt',
'Tin',
'Copper',
'Titanium',
'Germanium',
'Tungsten',
'Gold',
'Uranium',
'Holmium',
'Vanadium',
'Iron',
'Zinc',
'Lanthanum',
'Zirconium',
'Respirable crystalline silica dust',
'Trichloroethylene',
'Vinyl chloride']

bad_ingredients_set = set(bad_ingredients)

new_data = ''
for ingredient in ingredients:
    if ingredient in bad_ingredients_set:
        print(ingredient,"potentially causes cancer")
        new_data = "this product potentially causes cancer"
    if ingredient not in bad_ingredients_set:
        new_data = "this product is probably safe from cancer"
        print("This product is mostly safe from cancer")


doc_ref = db.collection("ifbadornot").document()
doc_ref.set(new_data)

#https://api.nal.usda.gov/fdc/v1/foods/search?query=apple&pageSize=2&api_key=uInUt3O980gGxC2jAEA20komAXPYeeUTgtUfUYfr
#based on brute-force and open-source code
